#!/usr/bin/expect

log_file -noappend backend.log

spawn socat -,echo=0 UNIX-CONNECT:var/lircd.socket.backend

set timeout 5000
set pid [pid]
set device  "/dev/lirc0"
remove_nulls

if {$argc > 0 } { set timeout [lindex $argv 0]}
if {$argc > 1 } { set device [lindex $argv 1]}
send_log "Timeout: $timeout\n"

while (1) {
    expect {
        "SET_DATA_SOCKET*\n" {
            set words [split $expect_out(0,string)]
            set backend_data [lindex $words 1]
            send_log "Backend data socket: $backend_data\n"
            set data_fp [open $backend_data w]
            send "BEGIN\n"
            send "SET_DATA_SOCKET\n"
            send "SUCCESS\n"
            send "END\n"
        }
        "GET_BACKEND_INFO*\n"  {
            send "BEGIN\n"
            send "GET_BACKEND_INFO\n"
            send "SUCCESS\n"
            send "DATA\n"
            send "1\n"
            send  "std $pid default $device"
	    send "\n"
            send "END\n"
        }
        "SEND_ONCE*\n" {
            send_log "Command: $expect_out(0,string)"
            send "BEGIN\n"
            send "SEND_ONCE\n"
            send "SUCCESS\n"
            send "END\n"
        }
        "SEND_START*\n" {
            send_log "SEND_START\n"
            send "BEGIN\n"
            send "SEND_START\n"
            send "SUCCESS\n"
            send "END\n"
        }
        "SEND_STOP*\n" {
            send_log "SEND_STOP\n"
            send "BEGIN\n"
            send "SEND_STOP\n"
            send "SUCCESS\n"
            send "END\n"
        }
        "STOP_BACKEND*\n" {
            send_log "STOP_BACKEND\n"
            send "BEGIN\n"
            send "STOP_BACKEND\n"
            send "SUCCESS\n"
            send "END\n"
	    exit
        }
        "SET_TRANSMITTERS*\n" {
            send_log "SET_TRANSMITTERS\n"
            send "BEGIN\n"
            send "SET_TRANSMITTERS\n"
            send "SUCCESS\n"
            send "END\n"
        }
        "SIMULATE*\n" {
            send_log "SIMULATE\n"
            send "BEGIN\n"
            send "SIMULATE\n"
            send "SUCCESS\n"
            send "END\n"
        }
          "LIST_REMOTES*\n" {
            send_log "LIST_REMOTES\n"
            send "BEGIN\n"
            send "LIST_REMOTES\n"
            send "SUCCESS\n"
            send "DATA\n"
            send "2\n"
            send "mceusb1\n"
            send "mceusb2\n"
            send "END\n"
        }
        "LIST_CODES*\n" {
            send_log "LIST_CODES\n"
            send "BEGIN\n"
            send "LIST_CODES\n"
            send "SUCCESS\n"
            send "DATA\n"
            send "11\n"
	    send "KEY_0\n"
	    send "KEY_1\n"
	    send "KEY_2\n"
	    send "KEY_3\n"
	    send "KEY_4\n"
	    send "KEY_5\n"
	    send "KEY_6\n"
	    send "KEY_7\n"
	    send "KEY_8\n"
	    send "KEY_9\n"
	    send "KEY_HOME\n"
            send "END\n"
        }
        eof { send_log "eof" }
        timeout {
                puts $data_fp "000000000000000000 01 mceusb KEY_1"
                flush $data_fp
                send_log "Event: 000000000000000000 01 mceusb KEY_1\n"
        }
    }
}
