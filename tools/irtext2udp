#! /usr/bin/env python

# Convert an input of pulse/space such as generated by irw(1) and convert
# it to the binary representation used by the udp driver.

import argparse
import ctypes
import os
import struct
import sys
import config

def _filter(file_, resolution):

    for line in file_:
        parts = line.split(" ")
        duration = int(parts[1])
        ticks = int(duration/resolution)
        if ticks < (1 << 15):
            payload = ticks
            if parts[0].startswith('pulse'):
                payload += (1 << 15)
            elif not parts[0].startswith('space'):
                continue
            buf = struct.pack('<H', payload)
        else:
            payload = 0
            if parts[0].startswith('pulse'):
                payload += (1 << 15)
            elif not parts[0].startswith('space'):
                continue
            buf = struct.pack('<H', payload)
            buf = struct.pack('<L', ticks)
        os.write(1, buf);


def irtext2udp():
    parser = argparse.ArgumentParser()
    parser.add_argument("-r", "--resolution", "--clocktick",
                        dest = "resolution", default = 1000000/16384,
                        help="Resolution, as defined by Lirc UDP driver.",
                        type=int)
    parser.add_argument("-v", "--version", action="store_true",
                        dest = "version", default = False,
                        help="Print version.")
    parser.add_argument('infile', nargs='?', type=argparse.FileType('r'),
                        default=sys.stdin)
    args = parser.parse_args()

    if args.version:
        print config.VERSION
        sys.exit(0)

    _filter(args.infile, args.resolution)

if __name__ == "__main__":
    irtext2udp()
